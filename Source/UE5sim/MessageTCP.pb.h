// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTCP.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageTCP_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MessageTCP_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageTCP_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageTCP_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MessageTCP_2eproto;
class MessageTCP;
struct MessageTCPDefaultTypeInternal;
extern MessageTCPDefaultTypeInternal _MessageTCP_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MessageTCP* Arena::CreateMaybeMessage<::MessageTCP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MessageTCP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageTCP) */ {
 public:
  inline MessageTCP() : MessageTCP(nullptr) {}
  ~MessageTCP() override;
  explicit PROTOBUF_CONSTEXPR MessageTCP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageTCP(const MessageTCP& from);
  MessageTCP(MessageTCP&& from) noexcept
    : MessageTCP() {
    *this = ::std::move(from);
  }

  inline MessageTCP& operator=(const MessageTCP& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageTCP& operator=(MessageTCP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageTCP& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageTCP* internal_default_instance() {
    return reinterpret_cast<const MessageTCP*>(
               &_MessageTCP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageTCP& a, MessageTCP& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageTCP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageTCP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageTCP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageTCP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageTCP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageTCP& from) {
    MessageTCP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageTCP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageTCP";
  }
  protected:
  explicit MessageTCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentInputFieldNumber = 3,
    kEnvStateFieldNumber = 4,
    kModelFieldNumber = 2,
    kFunctionCallFieldNumber = 7,
    kDebugMsgFieldNumber = 8,
    kAgentIdFieldNumber = 1,
    kDoneFieldNumber = 6,
    kRewardFieldNumber = 5,
  };
  // repeated float agent_input = 3;
  int agent_input_size() const;
  private:
  int _internal_agent_input_size() const;
  public:
  void clear_agent_input();
  private:
  float _internal_agent_input(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_agent_input() const;
  void _internal_add_agent_input(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_agent_input();
  public:
  float agent_input(int index) const;
  void set_agent_input(int index, float value);
  void add_agent_input(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      agent_input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_agent_input();

  // repeated float env_state = 4;
  int env_state_size() const;
  private:
  int _internal_env_state_size() const;
  public:
  void clear_env_state();
  private:
  float _internal_env_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_env_state() const;
  void _internal_add_env_state(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_env_state();
  public:
  float env_state(int index) const;
  void set_env_state(int index, float value);
  void add_env_state(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      env_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_env_state();

  // bytes model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string function_call = 7;
  void clear_function_call();
  const std::string& function_call() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_call(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_call();
  PROTOBUF_NODISCARD std::string* release_function_call();
  void set_allocated_function_call(std::string* function_call);
  private:
  const std::string& _internal_function_call() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_call(const std::string& value);
  std::string* _internal_mutable_function_call();
  public:

  // string debug_msg = 8;
  void clear_debug_msg();
  const std::string& debug_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_debug_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_debug_msg();
  PROTOBUF_NODISCARD std::string* release_debug_msg();
  void set_allocated_debug_msg(std::string* debug_msg);
  private:
  const std::string& _internal_debug_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_debug_msg(const std::string& value);
  std::string* _internal_mutable_debug_msg();
  public:

  // int32 agent_id = 1;
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // bool done = 6;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // double reward = 5;
  void clear_reward();
  double reward() const;
  void set_reward(double value);
  private:
  double _internal_reward() const;
  void _internal_set_reward(double value);
  public:

  // @@protoc_insertion_point(class_scope:MessageTCP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > agent_input_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > env_state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_call_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_msg_;
    int32_t agent_id_;
    bool done_;
    double reward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageTCP_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageTCP

// int32 agent_id = 1;
inline void MessageTCP::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t MessageTCP::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t MessageTCP::agent_id() const {
  // @@protoc_insertion_point(field_get:MessageTCP.agent_id)
  return _internal_agent_id();
}
inline void MessageTCP::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void MessageTCP::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:MessageTCP.agent_id)
}

// bytes model = 2;
inline void MessageTCP::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& MessageTCP::model() const {
  // @@protoc_insertion_point(field_get:MessageTCP.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageTCP::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTCP.model)
}
inline std::string* MessageTCP::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:MessageTCP.model)
  return _s;
}
inline const std::string& MessageTCP::_internal_model() const {
  return _impl_.model_.Get();
}
inline void MessageTCP::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageTCP::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageTCP::release_model() {
  // @@protoc_insertion_point(field_release:MessageTCP.model)
  return _impl_.model_.Release();
}
inline void MessageTCP::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTCP.model)
}

// repeated float agent_input = 3;
inline int MessageTCP::_internal_agent_input_size() const {
  return _impl_.agent_input_.size();
}
inline int MessageTCP::agent_input_size() const {
  return _internal_agent_input_size();
}
inline void MessageTCP::clear_agent_input() {
  _impl_.agent_input_.Clear();
}
inline float MessageTCP::_internal_agent_input(int index) const {
  return _impl_.agent_input_.Get(index);
}
inline float MessageTCP::agent_input(int index) const {
  // @@protoc_insertion_point(field_get:MessageTCP.agent_input)
  return _internal_agent_input(index);
}
inline void MessageTCP::set_agent_input(int index, float value) {
  _impl_.agent_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:MessageTCP.agent_input)
}
inline void MessageTCP::_internal_add_agent_input(float value) {
  _impl_.agent_input_.Add(value);
}
inline void MessageTCP::add_agent_input(float value) {
  _internal_add_agent_input(value);
  // @@protoc_insertion_point(field_add:MessageTCP.agent_input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MessageTCP::_internal_agent_input() const {
  return _impl_.agent_input_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MessageTCP::agent_input() const {
  // @@protoc_insertion_point(field_list:MessageTCP.agent_input)
  return _internal_agent_input();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MessageTCP::_internal_mutable_agent_input() {
  return &_impl_.agent_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MessageTCP::mutable_agent_input() {
  // @@protoc_insertion_point(field_mutable_list:MessageTCP.agent_input)
  return _internal_mutable_agent_input();
}

// repeated float env_state = 4;
inline int MessageTCP::_internal_env_state_size() const {
  return _impl_.env_state_.size();
}
inline int MessageTCP::env_state_size() const {
  return _internal_env_state_size();
}
inline void MessageTCP::clear_env_state() {
  _impl_.env_state_.Clear();
}
inline float MessageTCP::_internal_env_state(int index) const {
  return _impl_.env_state_.Get(index);
}
inline float MessageTCP::env_state(int index) const {
  // @@protoc_insertion_point(field_get:MessageTCP.env_state)
  return _internal_env_state(index);
}
inline void MessageTCP::set_env_state(int index, float value) {
  _impl_.env_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:MessageTCP.env_state)
}
inline void MessageTCP::_internal_add_env_state(float value) {
  _impl_.env_state_.Add(value);
}
inline void MessageTCP::add_env_state(float value) {
  _internal_add_env_state(value);
  // @@protoc_insertion_point(field_add:MessageTCP.env_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MessageTCP::_internal_env_state() const {
  return _impl_.env_state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MessageTCP::env_state() const {
  // @@protoc_insertion_point(field_list:MessageTCP.env_state)
  return _internal_env_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MessageTCP::_internal_mutable_env_state() {
  return &_impl_.env_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MessageTCP::mutable_env_state() {
  // @@protoc_insertion_point(field_mutable_list:MessageTCP.env_state)
  return _internal_mutable_env_state();
}

// double reward = 5;
inline void MessageTCP::clear_reward() {
  _impl_.reward_ = 0;
}
inline double MessageTCP::_internal_reward() const {
  return _impl_.reward_;
}
inline double MessageTCP::reward() const {
  // @@protoc_insertion_point(field_get:MessageTCP.reward)
  return _internal_reward();
}
inline void MessageTCP::_internal_set_reward(double value) {
  
  _impl_.reward_ = value;
}
inline void MessageTCP::set_reward(double value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:MessageTCP.reward)
}

// bool done = 6;
inline void MessageTCP::clear_done() {
  _impl_.done_ = false;
}
inline bool MessageTCP::_internal_done() const {
  return _impl_.done_;
}
inline bool MessageTCP::done() const {
  // @@protoc_insertion_point(field_get:MessageTCP.done)
  return _internal_done();
}
inline void MessageTCP::_internal_set_done(bool value) {
  
  _impl_.done_ = value;
}
inline void MessageTCP::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:MessageTCP.done)
}

// string function_call = 7;
inline void MessageTCP::clear_function_call() {
  _impl_.function_call_.ClearToEmpty();
}
inline const std::string& MessageTCP::function_call() const {
  // @@protoc_insertion_point(field_get:MessageTCP.function_call)
  return _internal_function_call();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageTCP::set_function_call(ArgT0&& arg0, ArgT... args) {
 
 _impl_.function_call_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTCP.function_call)
}
inline std::string* MessageTCP::mutable_function_call() {
  std::string* _s = _internal_mutable_function_call();
  // @@protoc_insertion_point(field_mutable:MessageTCP.function_call)
  return _s;
}
inline const std::string& MessageTCP::_internal_function_call() const {
  return _impl_.function_call_.Get();
}
inline void MessageTCP::_internal_set_function_call(const std::string& value) {
  
  _impl_.function_call_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageTCP::_internal_mutable_function_call() {
  
  return _impl_.function_call_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageTCP::release_function_call() {
  // @@protoc_insertion_point(field_release:MessageTCP.function_call)
  return _impl_.function_call_.Release();
}
inline void MessageTCP::set_allocated_function_call(std::string* function_call) {
  if (function_call != nullptr) {
    
  } else {
    
  }
  _impl_.function_call_.SetAllocated(function_call, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.function_call_.IsDefault()) {
    _impl_.function_call_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTCP.function_call)
}

// string debug_msg = 8;
inline void MessageTCP::clear_debug_msg() {
  _impl_.debug_msg_.ClearToEmpty();
}
inline const std::string& MessageTCP::debug_msg() const {
  // @@protoc_insertion_point(field_get:MessageTCP.debug_msg)
  return _internal_debug_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageTCP::set_debug_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.debug_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageTCP.debug_msg)
}
inline std::string* MessageTCP::mutable_debug_msg() {
  std::string* _s = _internal_mutable_debug_msg();
  // @@protoc_insertion_point(field_mutable:MessageTCP.debug_msg)
  return _s;
}
inline const std::string& MessageTCP::_internal_debug_msg() const {
  return _impl_.debug_msg_.Get();
}
inline void MessageTCP::_internal_set_debug_msg(const std::string& value) {
  
  _impl_.debug_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageTCP::_internal_mutable_debug_msg() {
  
  return _impl_.debug_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageTCP::release_debug_msg() {
  // @@protoc_insertion_point(field_release:MessageTCP.debug_msg)
  return _impl_.debug_msg_.Release();
}
inline void MessageTCP::set_allocated_debug_msg(std::string* debug_msg) {
  if (debug_msg != nullptr) {
    
  } else {
    
  }
  _impl_.debug_msg_.SetAllocated(debug_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.debug_msg_.IsDefault()) {
    _impl_.debug_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageTCP.debug_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MessageTCP_2eproto
