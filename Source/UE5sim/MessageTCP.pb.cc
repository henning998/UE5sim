#include "CoreMinimal.h"
THIRD_PARTY_INCLUDES_START
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTCP.proto

#include "MessageTCP.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR MessageTCP::MessageTCP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agent_input_)*/{}
  , /*decltype(_impl_.env_state_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.function_call_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agent_id_)*/0
  , /*decltype(_impl_.done_)*/false
  , /*decltype(_impl_.reward_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageTCPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageTCPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageTCPDefaultTypeInternal() {}
  union {
    MessageTCP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageTCPDefaultTypeInternal _MessageTCP_default_instance_;
static ::_pb::Metadata file_level_metadata_MessageTCP_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_MessageTCP_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MessageTCP_2eproto = nullptr;

const uint32_t TableStruct_MessageTCP_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.agent_id_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.agent_input_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.env_state_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.reward_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.done_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.function_call_),
  PROTOBUF_FIELD_OFFSET(::MessageTCP, _impl_.debug_msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MessageTCP)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_MessageTCP_default_instance_._instance,
};

const char descriptor_table_protodef_MessageTCP_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MessageTCP.proto\"\235\001\n\nMessageTCP\022\020\n\010age"
  "nt_id\030\001 \001(\005\022\r\n\005model\030\002 \001(\014\022\023\n\013agent_inpu"
  "t\030\003 \003(\002\022\021\n\tenv_state\030\004 \003(\002\022\016\n\006reward\030\005 \001"
  "(\001\022\014\n\004done\030\006 \001(\010\022\025\n\rfunction_call\030\007 \001(\t\022"
  "\021\n\tdebug_msg\030\010 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_MessageTCP_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MessageTCP_2eproto = {
    false, false, 186, descriptor_table_protodef_MessageTCP_2eproto,
    "MessageTCP.proto",
    &descriptor_table_MessageTCP_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_MessageTCP_2eproto::offsets,
    file_level_metadata_MessageTCP_2eproto, file_level_enum_descriptors_MessageTCP_2eproto,
    file_level_service_descriptors_MessageTCP_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MessageTCP_2eproto_getter() {
  return &descriptor_table_MessageTCP_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MessageTCP_2eproto(&descriptor_table_MessageTCP_2eproto);

// ===================================================================

class MessageTCP::_Internal {
 public:
};

MessageTCP::MessageTCP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MessageTCP)
}
MessageTCP::MessageTCP(const MessageTCP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageTCP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_input_){from._impl_.agent_input_}
    , decltype(_impl_.env_state_){from._impl_.env_state_}
    , decltype(_impl_.model_){}
    , decltype(_impl_.function_call_){}
    , decltype(_impl_.debug_msg_){}
    , decltype(_impl_.agent_id_){}
    , decltype(_impl_.done_){}
    , decltype(_impl_.reward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.function_call_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_call_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function_call().empty()) {
    _this->_impl_.function_call_.Set(from._internal_function_call(), 
      _this->GetArenaForAllocation());
  }
  _impl_.debug_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_debug_msg().empty()) {
    _this->_impl_.debug_msg_.Set(from._internal_debug_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.agent_id_, &from._impl_.agent_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reward_) -
    reinterpret_cast<char*>(&_impl_.agent_id_)) + sizeof(_impl_.reward_));
  // @@protoc_insertion_point(copy_constructor:MessageTCP)
}

inline void MessageTCP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agent_input_){arena}
    , decltype(_impl_.env_state_){arena}
    , decltype(_impl_.model_){}
    , decltype(_impl_.function_call_){}
    , decltype(_impl_.debug_msg_){}
    , decltype(_impl_.agent_id_){0}
    , decltype(_impl_.done_){false}
    , decltype(_impl_.reward_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.function_call_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_call_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.debug_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageTCP::~MessageTCP() {
  // @@protoc_insertion_point(destructor:MessageTCP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageTCP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agent_input_.~RepeatedField();
  _impl_.env_state_.~RepeatedField();
  _impl_.model_.Destroy();
  _impl_.function_call_.Destroy();
  _impl_.debug_msg_.Destroy();
}

void MessageTCP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageTCP::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageTCP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_input_.Clear();
  _impl_.env_state_.Clear();
  _impl_.model_.ClearToEmpty();
  _impl_.function_call_.ClearToEmpty();
  _impl_.debug_msg_.ClearToEmpty();
  ::memset(&_impl_.agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reward_) -
      reinterpret_cast<char*>(&_impl_.agent_id_)) + sizeof(_impl_.reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageTCP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.agent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float agent_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_agent_input(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_agent_input(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float env_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_env_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_env_state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double reward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool done = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string function_call = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_function_call();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MessageTCP.function_call"));
        } else
          goto handle_unusual;
        continue;
      // string debug_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_debug_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MessageTCP.debug_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageTCP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageTCP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 agent_id = 1;
  if (this->_internal_agent_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_agent_id(), target);
  }

  // bytes model = 2;
  if (!this->_internal_model().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_model(), target);
  }

  // repeated float agent_input = 3;
  if (this->_internal_agent_input_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_agent_input(), target);
  }

  // repeated float env_state = 4;
  if (this->_internal_env_state_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_env_state(), target);
  }

  // double reward = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_reward(), target);
  }

  // bool done = 6;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_done(), target);
  }

  // string function_call = 7;
  if (!this->_internal_function_call().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_call().data(), static_cast<int>(this->_internal_function_call().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTCP.function_call");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_function_call(), target);
  }

  // string debug_msg = 8;
  if (!this->_internal_debug_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_debug_msg().data(), static_cast<int>(this->_internal_debug_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageTCP.debug_msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_debug_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageTCP)
  return target;
}

size_t MessageTCP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageTCP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float agent_input = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_agent_input_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float env_state = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_env_state_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // bytes model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_model());
  }

  // string function_call = 7;
  if (!this->_internal_function_call().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_call());
  }

  // string debug_msg = 8;
  if (!this->_internal_debug_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_debug_msg());
  }

  // int32 agent_id = 1;
  if (this->_internal_agent_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_agent_id());
  }

  // bool done = 6;
  if (this->_internal_done() != 0) {
    total_size += 1 + 1;
  }

  // double reward = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = this->_internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageTCP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageTCP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageTCP::GetClassData() const { return &_class_data_; }


void MessageTCP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageTCP*>(&to_msg);
  auto& from = static_cast<const MessageTCP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MessageTCP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agent_input_.MergeFrom(from._impl_.agent_input_);
  _this->_impl_.env_state_.MergeFrom(from._impl_.env_state_);
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_function_call().empty()) {
    _this->_internal_set_function_call(from._internal_function_call());
  }
  if (!from._internal_debug_msg().empty()) {
    _this->_internal_set_debug_msg(from._internal_debug_msg());
  }
  if (from._internal_agent_id() != 0) {
    _this->_internal_set_agent_id(from._internal_agent_id());
  }
  if (from._internal_done() != 0) {
    _this->_internal_set_done(from._internal_done());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reward = from._internal_reward();
  uint64_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    _this->_internal_set_reward(from._internal_reward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageTCP::CopyFrom(const MessageTCP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageTCP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTCP::IsInitialized() const {
  return true;
}

void MessageTCP::InternalSwap(MessageTCP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agent_input_.InternalSwap(&other->_impl_.agent_input_);
  _impl_.env_state_.InternalSwap(&other->_impl_.env_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_call_, lhs_arena,
      &other->_impl_.function_call_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debug_msg_, lhs_arena,
      &other->_impl_.debug_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageTCP, _impl_.reward_)
      + sizeof(MessageTCP::_impl_.reward_)
      - PROTOBUF_FIELD_OFFSET(MessageTCP, _impl_.agent_id_)>(
          reinterpret_cast<char*>(&_impl_.agent_id_),
          reinterpret_cast<char*>(&other->_impl_.agent_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageTCP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MessageTCP_2eproto_getter, &descriptor_table_MessageTCP_2eproto_once,
      file_level_metadata_MessageTCP_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MessageTCP*
Arena::CreateMaybeMessage< ::MessageTCP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageTCP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
